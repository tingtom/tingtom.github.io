{"template":"../src/containers/Post","sharedHashesByProp":{},"data":{"title":"ambient_generic OnEnd event","slug":"ambient-generic-onend-event","date":"2018-1-16","mins":20,"summary":"A quick snippet of code for the ambient_generic entity that will fire an output event when the sound has finished.","contents":"<p>A quick snippet of code for the ambient_generic entity that will fire an output event when the sound has finished, useful for playing sounds one after another or whatever else you can come up with!</p>\n<p>First you need two variables, one for tracking the end of the sound and another for the output event itself. Oh and a definition for a new think context for tracking the end, these all need to go in the CAmbientGeneric constructor in the public section:</p>\n<pre><code class=\"language-cpp\">void EndThink();\n\nfloat endTime;\nCOutputEvent m_OnEnd;</code></pre>\n<p>These then need going in the BEGIN_DATADESC section:</p>\n<pre><code class=\"language-cpp\">DEFINE_OUTPUT(m_OnEnd, &quot;OnEnd&quot;),\nDEFINE_FIELD( endTime, FIELD_FLOAT),\nDEFINE_FUNCTION( EndThink ),</code></pre>\n<p>The endTime variable needs a default value so it can be setup to track the end of the sound, I usually set this to a value like -1. This goes in the Spawn function of the CAmbientGeneric class aswell as some code to setup the think function for tracking the end of the sound.</p>\n<pre><code class=\"language-cpp\">endTime = -1.0f;\n\nRegisterThinkContext(&quot;EndContext&quot;);\nSetContextThink(&amp;CAmbientGeneric::EndThink, gpGlobals-&gt;curtime, &quot;EndContext&quot;);\nSetNextThink(TICK_NEVER_THINK, &quot;EndContext&quot;);</code></pre>\n<p>This code sets up a new think context so it can be controlled independently from the other think function called RampThink, this think doesn&#39;t start straight away and is only started in the Activate and ToggleSound functions of the CAmbientGeneric class:</p>\n<pre><code class=\"language-cpp\">SetNextThink(gpGlobals-&gt;curtime + 0.1f, &quot;EndContext&quot;);</code></pre>\n<p>The end of the ToggleSound function should look like this:</p>\n<pre><code class=\"language-cpp\">InitModulationParms();\n\nSendSound( SND_NOFLAGS ); // send sound\n\nSetNextThink( gpGlobals-&gt;curtime + 0.1f );\nSetNextThink(gpGlobals-&gt;curtime + 0.1f, &quot;EndContext&quot;);</code></pre>\n<p>The only missing part now is the EndThink function:</p>\n<pre><code class=\"language-cpp\">void CAmbientGeneric::EndThink()\n{\n    //Get duration of the file\n    if (endTime == -1.0f)\n        endTime = gpGlobals-&gt;curtime + enginesound-&gt;GetSoundDuration((char *)STRING(m_iszSound));\n    else\n        //Became inactive\n        if (!m_fActive || gpGlobals-&gt;curtime &gt; endTime)\n        {\n            m_OnEnd.FireOutput(this, this);\n            endTime = -1.0f;\n            return;\n        }\n\n\n    SetNextThink(gpGlobals-&gt;curtime + 1.0f, &quot;EndContext&quot;);\n}</code></pre>\n<p>This first checks the endTime variable to see if it&#39;s set or not and sets it to the duration of the current sound if it&#39;s not, if it is set a check is made to see if the sound was stopped on purpose or if the duration of the sound has elapsed. The endTime variable is then reset and the think function returns which means SetNextThink isn&#39;t called again so the EndThink code won&#39;t run until the sound is played again.</p>\n"},"path":"blog/ambient-generic-onend-event"}
