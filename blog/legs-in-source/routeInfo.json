{"template":"../src/containers/Post","sharedHashesByProp":{},"data":{"title":"Showing Legs in Source SDK","slug":"legs-in-source","date":"2019-08-05T00:00:00.000Z","mins":4,"summary":"An interesting addition to Aftermath was to show the legs of the player, each player could look down at their own player model which allowed each player to have a kind of representation in the game as they can see themselves and know which character they are","contents":"<p>An interesting addition to Aftermath was to show the legs of the player, each player could look down at their own player model which allowed each player to have a kind of representation in the game as they can see themselves and know which character they are.</p>\n<p>This post will be for singleplayer as this is the latest example I have but multiplayer should be similar since it&#39;s only client side code. All the code is in c_baseplayer.cpp &amp; h, first you make sure the model is set for the player:</p>\n<pre><code class=\"language-cpp\">void C_BasePlayer::Spawn( void )\n{\n    SetModel( &quot;models/myplayermodel/playermodel.mdl&quot; );\n}</code></pre>\n<p>This is because the legs come from the player model and the default has no animations and will not look great, next we&#39;ll move the model back so the camera doesn&#39;t clip with the camera.</p>\n<pre><code class=\"language-cpp\">const Vector&amp; C_BasePlayer::GetRenderOrigin( void )\n{\n    //Dont apply in thirdperson\n    if( IsLocalPlayer() &amp;&amp; !input-&gt;CAM_IsThirdPerson() )\n    {\n        static Vector forward;\n        AngleVectors( GetRenderAngles(), &amp;forward );\n\n        // Shift the render origin by a fixed amount\n        forward *= -25;\n        forward += GetAbsOrigin();\n\n        return forward;\n    }else{\n        return BaseClass::GetRenderOrigin();\n    }\n}</code></pre>\n<p>Here we determine the forward position (if we&#39;re not in thirdperson) and use it to change the render origin of the model back a bit, you can change 25 to whatever you want or even use a convar and test it in game.</p>\n<pre><code class=\"language-cpp\">ConVar cl_legs( &quot;cl_legs&quot;, &quot;1&quot;, 0, &quot;Enable or disable player leg rendering&quot;, true, 0, true, 1 );\n\nint C_BasePlayer::DrawModel( int flags )\n{\n    //Ignore if the convar is enabled\n    if( !cl_legs.GetBool() )\n        return 0;\n\n    CMatRenderContextPtr context(materials);\n\n    //Don&#39;t render above a certain height of the body\n    if ( IsLocalPlayer() &amp;&amp; !input-&gt;CAM_IsThirdPerson() )\n    {\n        if ( (GetFlags() &amp; FL_DUCKING) || m_Local.m_bDucking )\n        {\n            context-&gt;SetHeightClipMode(MATERIAL_HEIGHTCLIPMODE_RENDER_BELOW_HEIGHT);\n            context-&gt;SetHeightClipZ(GetAbsOrigin().z+27);\n        }else{\n            context-&gt;SetHeightClipMode(MATERIAL_HEIGHTCLIPMODE_RENDER_BELOW_HEIGHT);\n            context-&gt;SetHeightClipZ(GetAbsOrigin().z+50);\n        }\n    }\n\n    //Draw the model\n    int nDrawRes = BaseClass::DrawModel(flags);\n\n    // Remove height clipping\n    context-&gt;SetHeightClipMode(MATERIAL_HEIGHTCLIPMODE_DISABLE);\n\n    return nDrawRes;\n}</code></pre>\n<p>Here we clip the player model to remove the upperbody and even lower if the player is ducking, there&#39;s also a convar for disabling the legs.</p>\n<p>That&#39;s pretty much it, if you have access to the player models another option is to create a bodygroup and disable several parts of the body as you see fit but this is the easiest option.</p>\n"},"path":"blog/legs-in-source"}
