{"template":"../src/containers/Post","sharedHashesByProp":{},"data":{"title":"Player bleeding in Source SDK","slug":"bleeding-in-source","date":"2019-11-5","mins":12,"summary":"A random feature I added to a HL2MP mod was for the player to bleed for a bit after being shot, it uses HL2 particles to bleed from bullet holes for a specified amount of time.","contents":"<p>A random feature I added to a HL2MP mod was for the player to bleed for a bit after being shot, it uses HL2 particles to bleed from bullet holes for a specified amount of time. Here&#39;s how I did it:</p>\n<p>First we set up some variables in hl2mp_player.h</p>\n<pre><code class=\"language-cpp\">CNetworkVar( bool, m_bBleeding );\nVector bleedPos;\nVector bleedDir;\nfloat m_flBleedingTime;\nint bleedingAmount;</code></pre>\n<p>and then set the defaults for bleeding in hl2mp_player.cpp (Spawn function)</p>\n<pre><code class=\"language-cpp\">m_bBleeding = false;\nm_flBleedingTime = 0.0f;\nbleedingAmount = 0;</code></pre>\n<p>Still in hl2mp_player but in PostThink we do the actual bleeding based on these variables:</p>\n<pre><code class=\"language-cpp\">if( m_bBleeding &amp;&amp; bleedingAmount &gt; 0 &amp;&amp; m_flBleedingTime &lt; gpGlobals-&gt;curtime )\n{\n    //Bleed a little bit\n    TakeHealth( -1, DMG_GENERIC );\n\n    //Decrement\n    bleedingAmount--;\n    m_flBleedingTime = gpGlobals-&gt;curtime + BLEED_TIME;\n\n    //Finished bleeding\n    if( !bleedingAmount )\n        m_bBleeding = false;\n\n    //Spawn blood\n    UTIL_BloodSpray( bleedPos * GetAbsOrigin(), bleedDir, BloodColor(), bleedingAmount, FX_BLOODSPRAY_ALL );\n    UTIL_BloodDrips( bleedPos, bleedDir, BloodColor(), bleedingAmount );\n}</code></pre>\n<p>Now to actually start bleeding when damage is taken, so in OnTakeDamage we do this:</p>\n<pre><code class=\"language-cpp\">if( inputInfo.GetMaxDamage() != -1.0f )\n{\n    //Bleed!\n    m_bBleeding = true;\n    m_flBleedingTime = gpGlobals-&gt;curtime;\n    bleedingAmount = (int)ceil((float)inputInfo.GetDamage() / 5.0f);\n\n    Vector vecDir = vec3_origin;\n    if( inputInfo.GetInflictor() )\n    {\n        vecDir = inputInfo.GetInflictor()-&gt;WorldSpaceCenter() - Vector ( 0, 0, 10 ) - WorldSpaceCenter();\n        VectorNormalize( vecDir );\n    }\n\n    //Store last took damage\n    bleedPos = inputInfo.GetDamagePosition() / GetAbsOrigin();\n    bleedDir = vecDir;\n}</code></pre>\n<p>Here if the player is damaged we store the direction of the shot and calculate the position based on the offset on the players position. Now we need to network it so the player can see the blood on their end so we pop this in the send table as always:</p>\n<pre><code class=\"language-cpp\">SendPropBool( SENDINFO( m_bBleeding ) )</code></pre>\n<p>and add this to the recieve table in c_hl2mp_player.cpp:</p>\n<pre><code class=\"language-cpp\">RecvPropBool( RECVINFO( m_bBleeding ) )</code></pre>\n<p>and add two new variables to c_hl2mp_player.h:</p>\n<pre><code class=\"language-cpp\">//Bleeding\nbool m_bBleeding;\nfloat m_flTrailTime;</code></pre>\n<p>and set the defaults in Spawn (back in the cpp file) to this:</p>\n<pre><code class=\"language-cpp\">//Bleeding\nm_bBleeding = false;\nm_flTrailTime = 0.0f;</code></pre>\n<p>and now in ClientThink we do the bleeding for the local player!</p>\n<pre><code class=\"language-cpp\">//Bleed!\nif( m_bBleeding &amp;&amp; m_flTrailTime &lt; gpGlobals-&gt;curtime &amp;&amp; GetGroundEntity() )\n{\n    //Do a traceline from the player downwards\n    trace_t tr;\n    UTIL_TraceLine( GetAbsOrigin(), GetAbsOrigin()*Vector(0,0,-10), MASK_SOLID, this, COLLISION_GROUP_NONE, &amp;tr );\n\n    //Draw blood decal and increase time\n    UTIL_BloodDecalTrace( &amp;tr, BLOOD_COLOR_RED );\n    m_flTrailTime = gpGlobals-&gt;curtime+0.5f;\n}</code></pre>\n"},"path":"blog/bleeding-in-source"}
